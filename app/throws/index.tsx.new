import React, { useState, useEffect } from 'react';
import { StyleSheet, View, TouchableOpacity, Image, FlatList, RefreshControl } from 'react-native';
import { Stack, router } from 'expo-router';
import { Ionicons } from '@expo/vector-icons';
import { ThemedView } from '../components/ThemedView';
import { ThemedText } from '../components/ThemedText';
import { useThemeColor } from '../hooks/useThemeColor';
import { ThrowRecord } from '../../types';
import { getThrowsSorted } from '../../lib/throwHistory';

// Simple inline ThrowCard component
interface ThrowCardProps {
  throwRecord: ThrowRecord;
  onUpdate: () => void;
  onPress: () => void;
}

function ThrowCard({ throwRecord, onUpdate, onPress }: ThrowCardProps) {
  const iconColor = useThemeColor({}, 'accent');
  const secondaryColor = useThemeColor({}, 'secondary');

  const formatDate = (date: Date) => {
    return date.toLocaleDateString('en-US', { 
      month: 'short', 
      day: 'numeric', 
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const handleFavoriteToggle = () => {
    // Just toggle the favorite flag directly on the object
    throwRecord.isFavorite = !throwRecord.isFavorite;
    onUpdate();
  };

  return (
    <ThemedView variant="card" style={styles.card}>
      <TouchableOpacity style={styles.cardContent} onPress={onPress} activeOpacity={0.7}>
        <View style={styles.thumbnailContainer}>
          <Image
            source={require('../../assets/images/prev_throw_sample.jpg')}
            style={styles.thumbnail}
            resizeMode="cover"
          />
        </View>
        
        <View style={styles.infoContainer}>
          <View style={styles.nameRow}>
            <ThemedText style={styles.nameText} numberOfLines={1} ellipsizeMode="tail">
              {throwRecord.name}
            </ThemedText>
            <TouchableOpacity onPress={handleFavoriteToggle} style={styles.starButton}>
              <Ionicons 
                name={throwRecord.isFavorite ? 'star' : 'star-outline'} 
                size={24} 
                color={throwRecord.isFavorite ? '#FFD700' : secondaryColor}
              />
            </TouchableOpacity>
          </View>

          <ThemedText style={styles.dateText}>
            {formatDate(throwRecord.date)}
          </ThemedText>

          {/* Preview of stats */}
          <View style={styles.statsPreview}>
            <View style={styles.statItem}>
              <ThemedText style={styles.statValue}>
                {throwRecord.analysisResult.hipShoulderSeparationDeg?.toFixed(1)}Â°
              </ThemedText>
              <ThemedText style={styles.statLabel}>Hip-Shoulder</ThemedText>
            </View>
            <View style={styles.statItem}>
              <ThemedText style={styles.statValue}>
                {throwRecord.analysisResult.wristSpeedMps?.toFixed(1)} m/s
              </ThemedText>
              <ThemedText style={styles.statLabel}>Speed</ThemedText>
            </View>
          </View>
        </View>
      </TouchableOpacity>
    </ThemedView>
  );
}

export default function ThrowsListScreen() {
  const [refreshing, setRefreshing] = useState(false);
  const [throws, setThrows] = useState<ThrowRecord[]>([]);
  const accentColor = useThemeColor({}, 'accent');

  // Load data on component mount and when refreshing
  useEffect(() => {
    loadThrows();
  }, []);

  const loadThrows = () => {
    try {
      console.log("Loading throws data...");
      const sortedThrows = getThrowsSorted();
      console.log(`Found ${sortedThrows.length} throws`);
      setThrows(sortedThrows);
    } catch (error) {
      console.error("Error loading throws:", error);
    }
  };
  
  // Calculate if we have any favorites
  const hasFavorites = throws.some(t => t.isFavorite);
  
  // Pull to refresh handler
  const onRefresh = () => {
    setRefreshing(true);
    loadThrows();
    setTimeout(() => setRefreshing(false), 500);
  };
  
  // Section header for favorites or regular throws
  const SectionHeader = ({ title }: { title: string }) => (
    <View style={styles.sectionHeader}>
      <ThemedText style={styles.sectionTitle}>{title}</ThemedText>
    </View>
  );
  
  // Handle when a throw card needs updating
  const handleThrowUpdate = () => {
    // In a real app, this would reload data
    // For now, we just refresh the UI to show changes
    loadThrows();
  };
  
  // View details of a throw
  const handleViewThrow = (id: string) => {
    router.push({
      pathname: "/throws/[id]",
      params: { id }
    });
  };
  
  // Render each item with appropriate section headers
  const renderItem = ({ item, index }: { item: ThrowRecord; index: number }) => {
    const prevItem = index > 0 ? throws[index - 1] : null;
    const isFirstFavorite = item.isFavorite && (!prevItem || !prevItem.isFavorite);
    const isFirstNonFavorite = !item.isFavorite && prevItem && prevItem.isFavorite;
    
    return (
      <View>
        {index === 0 && item.isFavorite && <SectionHeader title="Favorites" />}
        {isFirstFavorite && index > 0 && <SectionHeader title="Favorites" />}
        {isFirstNonFavorite && <SectionHeader title="Recent Throws" />}
        {index === 0 && !item.isFavorite && <SectionHeader title="Recent Throws" />}
        <ThrowCard 
          throwRecord={item} 
          onUpdate={handleThrowUpdate}
          onPress={() => handleViewThrow(item.id)} 
        />
      </View>
    );
  };

  // Empty state when no throws exist
  const renderEmptyState = () => (
    <ThemedView style={styles.emptyContainer}>
      <Ionicons name="disc" size={64} color={accentColor} />
      <ThemedText style={styles.emptyTitle}>No Previous Throws</ThemedText>
      <ThemedText style={styles.emptyText}>
        Record a throw to analyze your technique and save it here
      </ThemedText>
    </ThemedView>
  );

  return (
    <ThemedView style={{ flex: 1 }}>
      <Stack.Screen
        options={{
          title: "Throw History",
          headerTitleStyle: { fontWeight: '600' },
        }}
      />
      
      <FlatList
        data={throws}
        renderItem={renderItem}
        keyExtractor={(item) => item.id}
        contentContainerStyle={styles.listContent}
        ListEmptyComponent={renderEmptyState}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            colors={[accentColor]}
            tintColor={accentColor}
          />
        }
      />
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  // List styles
  listContent: {
    padding: 16,
    paddingBottom: 32,
    flexGrow: 1,
  },
  sectionHeader: {
    marginVertical: 8,
    paddingBottom: 4,
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '700',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 32,
    marginTop: 64,
  },
  emptyTitle: {
    fontSize: 20,
    fontWeight: '600',
    marginTop: 16,
    marginBottom: 8,
  },
  emptyText: {
    fontSize: 16,
    textAlign: 'center',
    opacity: 0.7,
  },
  
  // ThrowCard styles
  card: {
    marginVertical: 8,
    paddingVertical: 12,
    paddingHorizontal: 0,
    width: '100%',
  },
  cardContent: {
    flexDirection: 'row',
    padding: 8,
  },
  thumbnailContainer: {
    width: 80,
    height: 80,
    borderRadius: 8,
    overflow: 'hidden',
    marginRight: 12,
  },
  thumbnail: {
    width: '100%',
    height: '100%',
  },
  infoContainer: {
    flex: 1,
    justifyContent: 'space-between',
  },
  nameRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  nameText: {
    fontSize: 18,
    fontWeight: '600',
    flex: 1,
    marginRight: 8,
  },
  starButton: {
    padding: 4,
  },
  dateText: {
    fontSize: 14,
    opacity: 0.7,
    marginTop: 2,
    marginBottom: 6,
  },
  statsPreview: {
    flexDirection: 'row',
    justifyContent: 'flex-start',
    marginTop: 4,
  },
  statItem: {
    marginRight: 16,
  },
  statValue: {
    fontSize: 16,
    fontWeight: '500',
  },
  statLabel: {
    fontSize: 12,
    opacity: 0.7,
  },
});
